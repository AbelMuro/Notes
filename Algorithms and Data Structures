LINEAR SEARCH: is a searching algorithm that goes through each element in the array, one by one. The time complexity 
              for this algorithm is O(n)

BINARY SEARCH: is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. 
               The idea of binary search is to use the information that the array is sorted and reduce the time 
               complexity to O(Log n). 
               
               EX:
               
                var search = function(nums, target) {
                    let middle;
                    let end =  nums.length - 1;
                    let start = 0;

                    while(start <= end){
                        middle = Math.floor((start + end) / 2);         //make sure to round down the result here 
                        if(nums[middle] > target)                       //we 
                            end = middle - 1;
                        else if(nums[middle] < target)
                            start = middle + 1;
                        else
                            return middle;
                    }
                    return -1;
                };


TWO POINTER MANIPULATION: Two pointers is really an easy and effective technique that is typically used for searching pairs in a sorted array.
Given a sorted array A (sorted in ascending order), having N integers, find if there exists any pair of elements (A[i], A[j]) such that their sum is equal to X.

            EX:
              
              let A = [1,2,3,4,5,6,7,8,9,10];
              let X = 10;
              
              for(let i = 0, j = A.length - 1; i < j; ){
                  if(A[i] + A[j] > X)
                      j++
                  
                  else if(A[i] + A[j] < X)
                      i++;
                    
                  else if(A[i] + A[j] == X)
                      return 1;
              
              }
