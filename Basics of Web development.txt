                                                            TERMINOLOGY OF WEB DEVELOPMENT

                                FRONT-END-DEVELOPMENT: development of the visual aspect of a website/app
                                
                                BACK-END-DEVELOPMENT: development of server-side logic and databases

                                API: application programming interface. They are interfaces that enable interaction between two software applications.
                                     this interface must be used if one software app wants to request resources from another software app

                                RESTfull API: Representational State Transfer API, They are interfaces that enable interaction between a Client (website) and a server through HTTP methods (GET, POST, DELETE, etc...)
                                              These API's must follow the following rules to be considered a RESTfull

                                              1) Stateless: the API cannot store any session data from the client
                                              2) HTTP Methods: the API must use HTTP methods (GET, POST, etc...)
                                              3) JSON Responses: the API must send responses containing data in JSON
                                              4) Endpoints: the API must have URL endpoints that represent resources (/username/settings)
                                              5) Client-Server Separation: The front-end and back-end operate independently, communicating via HTTP method requests.                                  
                                
                                SERVER: a computer that provides resources to other computers
                                        WEB-SERVER: a server that provides files of a website/app to other computers (netlify, vercel, etc...)
                                        APPLICATION-SERVER: a server that runs instructions and processes requests from other computers and sends responses (Node.js) 
                                        DATABASE-SERVER: a server that manages and stores data (SQL, noSQL)

                                HOW THE INTERNET WORKS:
                                          1) When you first type-in the URL of a website (www.google.com), the browser will check the DNS(Domain Name System) of the URL.
                                             The browser will use the DNS to translate the human-readable URL into the corresponding IP address of the server that is hosting the website 

                                          2) Once the browser knows the IP address of the server, it will make a request to that server, asking for all the resources of the website (HTML files, css files, JS files)

                                          3) The server will process the request and decide what content to send to the browser
                                              If the server uses server-side rendering, then the server will generate the website in the server first before sending a response
                                              If the server uses client-side rendering, then the server will first send the HTML files to the browser, then the JS files









'a' < 'b';                                                             // We are comparing the hexadecimal value of the letters in the string                                                                         
'!' < 'x';                                                             // the hexadecimal value of '!' is 0021, and the hexadecimal value of 'x' is 0078
                                                                       // '!' is lower in the hexadecimal chart than 'x' so this will return TRUE
'string' >= 'strong';                                                //keep in mind that EVERY letter in the string will be compared until a comparison returns false
                                                                       // 's', 't', 'r' are the same, so at this point, everything is true
                                                                       // but 'i' is less than 'o' in the hexadecimal chart, so the whole comparison return false

let num = 123123                                                        //.toLocaleString() will add commas to a number, but keep in mind that the number will be converted into a string
console.log(num.toLocaleString());                                      //will display '123,123'
num.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})		//.toLocaleString() has two arguments that you can use




//the following function enables adding two extremely large numbers without BigInt(not all versions of node.js and browsers can support BigInt)
//the logic of the following functions goes like this..

//elementary style adding...

//         111                //all the carries
//   345675366745             //we must iterate through the largest number, if both numbers are the same length, then no difference will be made
//         453323
//----------------
//   345675820068

function addNumbers(first = "9999523423423423435", second = "2762342342342342345") {
      let longestString;
      let shortestString;
    	if(first.length < second.length){                                 //you want to figure out if one string is bigger than the other
        	shortestString = first;
            longestString = second;
        }
        else{
        	shortestString = second;
            longestString = first;
        }
        	
        let carry = 0;
        let totalSum = "";
             
        for(let x = 0; x < longestString.length; x++){                           
        	let a = parseInt(longestString.charAt(first.length - 1 - x));
            let b = parseInt(shortestString.charAt(second.length - 1 - x));
            b = b ? b : 0;									
            let currentSum = a + b + carry;
            if(currentSum >= 10){
            	currentSum = currentSum.toString();
                carry = 1;
                totalSum += (currentSum.charAt(1).toString())
            }
            else{
                carry = 0;
                totalSum += (currentSum.toString());
            }  
        }   
        if(carry){
        	totalSum += carry;
        }
        totalSum = Array.from(totalSum).reverse();
        totalSum = totalSum.toString().replaceAll(",", "")
        console.log(totalSum);
            
    } 






// ==================================================== BASE (RADIX) ==========================================================================

/* 
	A base is a numerical system that uses symbols to represent numbers, the base that everyone is used to is base 10 (1, 2, 3, 4, ..... infinity);

 	Base 36
  		
		0
	 	1
	  	2
	   	3
	    	4
	     	5
	        6
	        7
	      	8
	        9
	        A		represents 10
	        B		represents 11
	        C		represents 12
		D		represents 13




	There are two functions that you can use to utilize these bases (the second argument has to be the same symbol that is used in the base)

  	const base36A = parseInt('a', 36)		//we get the number that is represented by 'a' in BASE 36, and that is 10
   	const letter = (13).toString(36)		//we get the number that is represents by '13' in BASE 36, and that is D

    

    	The only time that i ever used these bases was in leetcode to convert letters to numbers and vice versa
     	What you can do is create a mapping like this.. 

      		a -> 1
		b -> 2
  		c -> 3
        	..

  	you can use parseInt() and toString() to convert a to 1 and vice versa

	parseInt('a', 36) - 9							//this will convert 'a' into 1, this is useful for finding the location of a letter in the alphabet  a -> 1  b -> 2   c -> 3 ....  y -> 25  z -> 26
	
	const index = 2
	const letter = (index + 9).toString(36)					//this will convert 2 into 'b', this is usefull for getting letters in the alphabet based on their position   1 -> a   b -> 2   3 -> c  ....  25 -> y   26 -> z

 
*/














                                          4) The server will then send a response to the browser, containing all the files necessary for the website

                                          5) The browser interprets the HTML, applies CSS for styling, executes JavaScript for interactivity, and starts displaying content on your screen.
