/* Accessibility */
/* 
    Always use semantic HTML elements for your website, but don't use CSS in such a way that 
    will completely change the look or behavior of the semantic tag (changing the font size of <h1> to make it look smaller than <p>)
        
    Use font-sizes, line-height, and text-justify(can control spacing between words) that make text more readable for the user

    Use readable font-family that is easy to read

    Make sure your <h1> stands out from other <p> or <h2> elements

    Make sure the color of the text and color of the background has enough contrast

    Use alt attribute for your <img> tags

    Make sure that there is enough space between your elements on the website

*/





/* importing some fonts from google fonts*/
@import url('https://fonts.googleapis.com/css2?family=Anton&family=Bebas+Neue&family=Pacifico&family=Roboto&family=Shadows+Into+Light&display=swap');


/* CSS variables*/

:root {
    --variableOne: 100px;
    --variableTwo: 50vh;
    --variableThree: #1e90ff;
    --variableFour: red;
}

.usingVariables{
    width: var(--variableOne);
    height: var(--variableTwo);
    color: var(--variableThree);
    background-color: var(--variableFour);
}

.Units{
    height: 50px;         /* px means pixels*/
    font-size: 2rem       /* rem is a unit of measurement that is relative to the default font-size of the browser.... which for most browsers, is 16px..... in other words, 1rem represents 16px*/
    width: 100%;          /* percentage of the width of the parent element  50% means that the child element will take up 50% of available space in the parent*/
    grid-template-columns: 50px 1fr;    /* fr represents the available space in a grid */
    height: calc(100vh - 10px);        /* you can use the calc function to calculate a specific value based on an expression, this is usefull for calculating values with different units*/
}



/* CSS properties*/















.Miscellaneous {
    
    box-sizing: border-box, content-box;             /* this property lets us calculate the total width and height of a box
        border-box: the padding, margin and border are NOT added to the width and height of an element, 
                    the content is shrunk to adjust the padding and margin.
    
                    for example: 
                                 box-sizing: border-box;                               
                                 width: 100px;                          //final width of the element will still be 100px      
                                 padding: 10px;                         //but the content box will be 90px and padding will 
                                                                        //remain at 10px
    
        content-box: the padding, margin and border are added to the width and height of an element (this is default)
    */
    box-shadow: 5px 10px 15px 20px red;    /* we create a shadow for the box and move it 
        5px to the left or right, 
        10px to the top or bottom, 
        15px defines by how much we blur the shadow
        20px defines both the height and width of the shadow
        red is the color of the shadow

        its best to use the filter function equivalent of this one
    */
    opacity: 1.0;                        /* defines how transparent the element will be, 1.0 is fully visible, 0.0 is completely transparent*/
    overflow: hidden, scroll, auto, visible;/* determines how the content of a container will be displayed if it overflows 
        hidden: content that overflows will be hidden from view
        scroll: container will have a scroll bar 
        auto: container will have a scroll bar ONLY in the moment that the content starts to overflow
    */
    overflow-x: hidden, scroll, auto, visible; /* determins how the content of a container will be displayed if it overflows 
        from the left and right sides of the content box
        look at the notes for overflow for documentation of these values
    */
    overflow-y: hidden, scroll, auto, visible; /* determins how the content of a container will be displayed if it overflows 
        from the top and bottom sides of the content box
        look at the notes for overflow for documentation of these values
    */
    overflow-wrap: normal, break-word;     /* determines if long words that overflow the container will break 
        normal: long words will not break, this is default
        break-word: long words will break;
    */
    visibility: hidden, visible, collapse; /* this property will determine if an element will be shown onto the DOM 
        hidden: will hide the element but will reserve the space the element generates
        visible: will make the element visible to the DOM
        collapse: will hide the element and will also hide the space the element generates
    */

    clip-path: circle(20px at 30px 35px)            /*  20px is the size of the circle, 30px 35px is the position of the circle,     30px left or right        35px top or bottom
                                                        displays a circle inside an element, this circle acts like a viewport to the element

                                                                        ----------------------
                                                                       |     ____             |
                                                                       |    /     \           |     //anything outside the circle will not be visible in the DOM
                                                                       |    \     /           |     //just image that the poorly drawn thing inside the square is actually a circle,
                                                                       |     ----             |
                                                                        ----------------------
                                                    */
    overflow: hidden;                                /*  you can use these two properties together to display 3 dots next to a number that is overflowing its container*/
    text-overflow: ellipsis;
    width: 100%;                                    /* make sure to set a width for the container*/
}







.MiscellaneousProperties {
    /*---------------------------------------------MISCELLANEOUS--------------------------------------------------------------------------*/
    opacity: 1.0;                                                  /* defines how transparent the element will be, 1.0 is fully visible, 0.0 is completely transparent*/
    content: "random content";                                      /* this property MUST be used with the ::before and ::after pseudo elements 
        it was designed to insert content before or after an element
    */
    accent-color: red;                                            /* this property will give a color to <input> elements such as
        radio-button, checkboxes, and range input elements
    */
    vertical-align: baseline, text-top, text-bottom, sub, super;    /* this property helps us align an element relative to the element next to it
    if the element(A) is bigger than the element(B) next to it, then the ELEMENT(B) will vertically align up or bottom relative to element(A) 
    if the element(A) is smaller than the element(B) next to it, then the Element(A) will vertically align up or bottom relative to element(B)
*/
    justify-items: stretch, center, start, end; /* defines how all the items are positioned inside their place in it's container
        look for the property 'justify-self' for more info
    */
    justify-self: stretch, center, start, end; /*this property defines how an item is positioned inside its place in its content-box 
        stretch: [---item---]
        center:  [   item   ]   
        start:   [item      ]      
        end:     [      item]
    */

}














/* ---------------------------------------------------------- MEDIA QUERIES ---------------------------------------------------------------*/
/* SYNTAX for @media queries */
/* if no media type is specified, then the ALL media type is implied*/


    /*-----media types----*/        /*---- media feature ------*/
@media print, screen, speech and (max-width: 300px) {
    /*--- styles to be applied ----*/
    .style{
        display: none;
    }
}

/* ---------------Different ways to use @media------------------ */
@media (min-height: 400px) {
}
@media (min-height: 500px), (orientation: landscape) {
}
@media (min-height: 400px) and (max-height: 600px) {
}



/*------------------------ @MEDIA PRINT ---------------------------------------------*/


/* @media will apply the styles before the document gets printed */
/* this is useful when you want to remove other content from the document */
/* and only want to include the content that you want to print in the document*/
@media print and (min-resolution: 300dpi) {             /* defines the minimum resolution for printing*/
    .sidebar, .navigationbar, .footer {
        visibility: hidden;
    }
}





/*------------------------ COMMONLY USED MEDIA FEATURES ---------------------------------------------*/     

/*-----------------Max-width  Min-width  Max-height  Min-height ------------------------ */
/* @media will trigger the new styles when the viewports width reaches 750px*/   
@media (max-width:750px){                                                    
    div{
        width: 100%;
        border-bottom: 1px solid white;
    }
}



/* ------------------------Any-pointer   Pointer ------------------------------------------------ */
/* @media will report the 'accuracy' of the input devices (mouse, touchscreen, or both)*/
/* 
    Any-pointer will check for ALL input devices connected to the device 
*/
/*
    Pointer will only check for the primary pointer device 
    (every device will have a primary, iphones will have touchpads as their primary )
    (and desktops will have mouses as their primary)
    the primary pointer device never really changes
*/
/* fine: means that at least one pointer device is very accurate */
/* coarse: means that at least one pointer device is not very accurate */
/* none: means that there are no input devices connected and the user is using a keyboard only*/

@media (any-pointer: coarse) {              /* (@media will apply the styles if a touchscreen is connected to the device) */
    * {
        width: 200px;
        height: 200px;
    }
}
@media (any-pointer: fine) {                /* (@media will apply the style if a mouse or mousepad is connected to the device) */
    * {
        width: 100px;
        height: 100px;
    }
}

@media (any-pointer: none) {                /* (@media will apply the styles if no pointer device is connected)*/
    * {
        width: 100px;
        height: 100px;
    }
}



/*---------------------------------- Any-hover   Hover ------------------------------------------------- */
/* 
    Any-Hover: will check if any available input devices can actually hover over elements
*/
/* 
    Hover: will check if the primary input device can actually hover over elements
*/
/* hover: means that at least one pointer device can hover over elements to trigger :hover effects*/
/* none: means that no pointer device can hover over elements to trigger :hover effects */
/* if it can hover over elements, then most likely, the input devices is a mouse, */
/* if it can't hover over elements, then most likely, the input device is a touchscreen */

.menu .dropdown{
    visibility: hidden;
}
.menu:hover .dropdown{
    visibility: visible;
}
@media (any-hover: none) {                      /* you mainly want to do this when you have a device (touchscreen) */
    .menu .dropdown{                            /* which cannot let you hover over things */
        visibility: visible
    }
}
/*  output:

    if pointer device allows you to hover (mouse or any device that has a cursor)
     -------------                   ------------
    |             |                 |            |
    |    Menu     |        ->       |   Menu  x  |          //just pretend the x is actually 
    |             |                 |            |             a button that appears that lets 
     -------------                   ------------               you make a dropdown 

     if pointer device does NOT allow you to hover (touchscreen or any device that doesnt have a cursor)


     -------------
    |             |
    |    Menu   x |            //all :hover effects are removed
    |             |             //so we just make the dropdown button visible
     -------------
*/



/*-------------------------------------- Orientation -------------------------------------------------------- */
/* orientation was designed for tablets and iphones*/
/* 
    landscape: iPad or iPhone is upside up
    width must be smaller than height
        ---------
        |       |
        |       |
        |       |
        |       |
        ---------
*/
/* 
    portrait: ipad or iphone is on the side
    height must be smaller than width
        --------------
        |            |
        |            |
        --------------
*/

@media (orientation: landscape) {
    body {
        flex-direction: row;
    }
}

@media (orientation: portrait) {
    body {
        flex-direction: column;
    }
}






/*------------------------ @SUPPORTS ---------------------------------------------*/

/* you can use @support rule to determine if the current browser supports */

@supports (display: flex) {
    @media screen and (min-width: 600px) {
        .someClass {
            display: flex;
        } 
    }
}



/*------------------------------------------------------ @PREFERS-COLOR-SCHEME --------------------------------------------------------------*/

// By default, most users have a 'theme' set on their computer; light theme or dark theme.
// users can change their theme at any time. So sometimes you want your website/application to reflect
// the theme that the user has set on their computer... and thats where prefers-color-scheme comes in
// this media query will apply any css properties defined based 



//will detect and apply the css selectors ONLY if the user has a dark theme set on their computer
@media (prefers-color-scheme: dark){
    body{
        background-color: black;
    }

    p, h1, h2, h3, {
       color: white;
    }
    
    div{
        box-shadow: 5px 5px 5px purple;
    }
}




//will detect and apply the css selectors ONLY if the user has a light theme set on their computer
@media (prefers-color-scheme: light){
    body{
        background-color: white;
    }

    p, h1, h2, h3, {
       color: black;
    }
    
    div{
        box-shadow: 5px 5px 5px red;
    }
}




























/*-----------------------------------------------------------SELECTORS------------------------------------------------------------------------------------------------------*/


/* UNIVERSAL SELECTOR, this will sellect ALL elements in the document */
*{                                              
    color: none;                          
 
}

/* TAG SELECTOR, this will select all <div> elements */
div {       
    color:none
}

/* MULTIPLE SELECTORS, you can select multiple elements like below*/
div, p, i, b {
    color:none;
}

/* DESCENDANT SELECTOR, this will select ALL the <p> elements that are nested inside <div> elements, including ALL the grandchildren*/
div p {
    color:none;
}

/* CHILD SELECTOR: it will select all <p> elements that are nested within <div>.. but will NOT select the grandchildren */
div > p{
    color:none;
}

/* ADJACENT SELECTOR: it will select the first neighboring <p> element that comes directly after all <div>*/
div + p{
    color:none;
}

/* GENERAL SIBLING SELECTOR: this will select ALL <p> elements that come directly after <div>*/
div ~ p
{
    color:none;
}

 /* The # defines an ID that can only be used by one element*/
#HeaderOne{                                     
    color:none;
    
}   

/* this will select <a> elements with the class="className" */
a.className{
    color:none;
}


















/*-------------------------------------------------------------------ATTRIBUTE SELECTORS----------------------------------------------------------------------------------------------------------------------*/

/* this will select all elements with the title attribute*/
[title]{
    color:none;
}

/* this will select only the <p> elements with the name attribute*/
p[name]{                                      
    background-color:blue;
}

/* same as above but will only select elements with attribute name="whatever"*/
p[name="whatever"]{                            
    color:red;
}

/* this will select all <p> elements that have the title attribute containing a space separated list of words, one of which MUST be flower*/
p[title~=flower]{
    color:none;
}

/* this will select any element that has a class name that is exactly "any" or a class name that has "any-"*/
[class|=any]{
    color:none;
}

/* this will select all <p> elements that have a class name that starts with "top"*/
p[class^="top"]
{
    color:none;
}

/* this will select all elements that have a class name that ENDS with "money" */
[class$="money"]
{
    color:none;
}

/* this will select all elements that have a class name that contains the words "honey" anywhere in the value*/
[class*="honey"] {
    color:none;
}

/* this will select all elements that have attribute dir = rtl AND have the class name example*/
[dir=rtl].example{
    color:none;
}













/*--------------------------------------------------------------------------PSEUDO CLASSES--------------------------------------------------------------------------*/
/* The pseudo-class is added to a selector when you want to control the styling when an element is in a particular state */


/* FOCUS PSEUDO CLASS: this class will change the background color when the user clicks/focuses on the input element (reserved for input tags)*/
input:focus{
    background-color:none;
}
                                        /* a:hover MUST come after a:link and a:visited in order to be effective! a:active MUST come after a:hover in order to be effective!.*/
/* LINK PSEUDO CLASSES: this class will alter the color of the link (reserved for anchor tags)*/
a:link{
    color: blue;
}

/* VISITED PSEUDO CLASSES: this class will alter the color of the link once the user has already clicked on it (reserved for anchor tags)*/
a:visited{
    color: orange;
}

/* HOVER PSEUDO CLASS: this class will change the state of an element once the user hovers over the element with their mouse cursor*/
div:hover{                                        /* :hover can be used by other elements*/             
    color:blue;
}

/* ACTIVE PSEUDO CLASS: this class will style the element in the MOMENT that the user clicks on the link, this will be visible for a very short time (reserved for anchor tags)*/
a:active{
    color:red
}

/* FIRST CHILD PSEUDO CLASS: this will style all the first <p> child elements of all parents */
p:first-child{
    color:none;
    content:"";
}

/* LAST CHILD PSEUDO CLASS: this class will style all <p> elements that are the last child for a parent*/
p:last-child{
    color: none;
}

 /* NOT PSEUDO CLASS:  this will select all anchor tags that do NOT have .currentPage*/
a:not(.currentPage) {                    
    color:blue
}

/* NTH TYPE PSEUDO CLASS: will select a <p> element IF its the 'second paragraph element' of a parent*/
p:nth-of-type(2) {              
    color:none
}
/* 
    <div>
        <span></span>
        <p></p> 
        <p></p>             // this will be selected
    </div>
*/


/* NTH CHILD PESUDO CLASS: will select a <p> element IF its a paragragh element AND it is the second child of a parent*/
p:nth-child(2) {
    color: none;
}
/* 
    <div>
        <span></span>
        <p></p>             // this will be selected
        <p></p>             
    </div>
    

*/
/* you can add an expression in the parameter below, n will increment one by one and based on the current number, it will select that specific <i>*/
i:nth-of-type(2n + 3), i:nth-child(2n + 1) {
    color:none;
}











/*---------------------------------------------------------PSEUDO ELEMENTS----------------------------------------------------------------------------------------------------------------*/
/* A pseudo-element is added to a selector when you want to style a specific part of the selected element */

/* you can also combine the pseudo elements, in this case, order doesnt matter*/
/* this selector will choose the first line inside every <p> element */
p:first-line{       
    color:none;
    content:"";
}

/* This selector will choose the first letter of every <p> element CAN ONLY BE USED WITH BLOCK LEVEL ELEMENTS*/
article p::first-letter{
    color:red;
    font-size:30px;
    content:"";
}

/* adding content before each <header> element*/
header::before{
    content: url("images/faviconThingie.png");
}

/* adding content AFTER each <p> element*/
p::after{
    color:none;
}

/* will change the content for every marker in all lists*/
ul::marker{
    color:none;
}

/* ::selection will change how highlighting text is displayed*/
p::selection{
    color: purple;
    background-color:red;
}





/*                 Firefox      scrollbar styling       */
.pieces{
    overflow: scroll;
    scrollbar-width: thin;                                    /* setting this to 'none' will remove the scrollbar and the space used by the scrollbar*/
    scrollbar-color: var(--scroll-bar-bg) transparent;
}

/*             WebKit Browsers (Chrome, Safari, Edge)                     */
.pieces::-webkit-scrollbar{
    display: none;            /* this will remove the scrollbar AND the space that is used by the scrollbar*/
    width: 10px;
    background-color: transparent;
}

.pieces::-webkit-scrollbar-thumb{
    display: none;             /* this will remove the scrollbar thumb AND the space that is used by the thumb*/
    background-color: var(--scroll-bar-bg);
    border-radius: 10px;
}



/*-----------------------------------------------------------------CLASSES------------------------------------------------------------------------------------------------------------ */

.linkButton{
    background-color: rgb(0, 255, 76);
    color: rgb(255, 0, 0);
    padding: 5px;         
    margin-top:10px;   
    display: inline-block;         /* display property determines if an element is treated as block or inline */
}                                   /* inline-block allows to set the width and height of the element and does not add a line break AFTER the element*/

.borderColors{
    border: 2px solid red; /* defines a solid border around the object*/
}
