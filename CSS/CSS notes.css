/* Accessibility */
/* 
    Always use semantic HTML elements for your website, but don't use CSS in such a way that 
    will completely change the look or behavior of the semantic tag (changing the font size of <h1> to make it look smaller than <p>)
        
    Use font-sizes, line-height, and text-justify(can control spacing between words) that make text more readable for the user

    Use readable font-family that is easy to read

    Make sure your <h1> stands out from other <p> or <h2> elements

    Make sure the color of the text and color of the background has enough contrast

    Use alt attribute for your <img> tags

    Make sure that there is enough space between your elements on the website

*/





/* importing some fonts from google fonts*/
@import url('https://fonts.googleapis.com/css2?family=Anton&family=Bebas+Neue&family=Pacifico&family=Roboto&family=Shadows+Into+Light&display=swap');


/* CSS variables*/

:root {
    --variableOne: 100px;
    --variableTwo: 50vh;
    --variableThree: #1e90ff;
    --variableFour: red;
}

.usingVariables{
    width: var(--variableOne);
    height: var(--variableTwo);
    color: var(--variableThree);
    background-color: var(--variableFour);
}

.Units{
    height: 50px;         /* px means pixels*/
    font-size: 2rem       /* rem is a unit of measurement that is relative to the default font-size of the browser.... which for most browsers, is 16px..... in other words, 1rem represents 16px*/
    width: 100%;          /* percentage of the width of the parent element  50% means that the child element will take up 50% of available space in the parent*/
    grid-template-columns: 50px 1fr;    /* fr represents the available space in a grid */
    height: calc(100vh - 10px);        /* you can use the calc function to calculate a specific value based on an expression, this is usefull for calculating values with different units*/
}



/* CSS properties*/
















/*---------------------------------------------------------PSEUDO ELEMENTS----------------------------------------------------------------------------------------------------------------*/
/* A pseudo-element is added to a selector when you want to style a specific part of the selected element */

/* you can also combine the pseudo elements, in this case, order doesnt matter*/
/* this selector will choose the first line inside every <p> element */
p:first-line{       
    color:none;
    content:"";
}

/* This selector will choose the first letter of every <p> element CAN ONLY BE USED WITH BLOCK LEVEL ELEMENTS*/
article p::first-letter{
    color:red;
    font-size:30px;
    content:"";
}

/* adding content before each <header> element*/
header::before{
    content: url("images/faviconThingie.png");
}

/* adding content AFTER each <p> element*/
p::after{
    color:none;
}

/* will change the content for every marker in all lists*/
ul::marker{
    color:none;
}

/* ::selection will change how highlighting text is displayed*/
p::selection{
    color: purple;
    background-color:red;
}





/*                 Firefox      scrollbar styling       */
.pieces{
    overflow: scroll;
    scrollbar-width: thin;                                    /* setting this to 'none' will remove the scrollbar and the space used by the scrollbar*/
    scrollbar-color: var(--scroll-bar-bg) transparent;
}

/*             WebKit Browsers (Chrome, Safari, Edge)                     */
.pieces::-webkit-scrollbar{
    display: none;            /* this will remove the scrollbar AND the space that is used by the scrollbar*/
    width: 10px;
    background-color: transparent;
}

.pieces::-webkit-scrollbar-thumb{
    display: none;             /* this will remove the scrollbar thumb AND the space that is used by the thumb*/
    background-color: var(--scroll-bar-bg);
    border-radius: 10px;
}



/*-----------------------------------------------------------------CLASSES------------------------------------------------------------------------------------------------------------ */

.linkButton{
    background-color: rgb(0, 255, 76);
    color: rgb(255, 0, 0);
    padding: 5px;         
    margin-top:10px;   
    display: inline-block;         /* display property determines if an element is treated as block or inline */
}                                   /* inline-block allows to set the width and height of the element and does not add a line break AFTER the element*/

.borderColors{
    border: 2px solid red; /* defines a solid border around the object*/
}
