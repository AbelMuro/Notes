//====================================USING variables from other files=============================================================
//@use loads mixins, functions and variables from other .scss files, these files are called modules
//the only way to use the variables and mixins from these files is by using a namespace to access them


@use 'sass:map';                  //loading the map module
@use 'sass:color';                //loading the color module
@use 'sass:list';                 //loading the list module
@use 'sass:meta';                  //loading the meta module
@use '_partial.scss' with (       //these variables are being redefined in this file
    $custom-color: pink,        //the variables were defined as !default, which means their value can be changed here
    $custom-font: "courier",     
    $custom-font-size: 100px,
);   
@use '_partial.scss' as c;        //c is now a 'NAMESPACE' that can be used to access all the SASS variables as if it were an object

.example_one {
    color: partial.$custom-color;       //you can also use the name of the file as a namespace    
    background-color: c.$custom-color;  //$custom-color is a variable from _partial.scss
    @include c.random;
}













//======================================= SASS VARIABLES =======================================
/* 
    You can create variables in SASS by using the $ operator
*/

$variable-one: red;                                       
$variable-two: blue;
$variable-three: 150px;
$font-stack: 'Times New Roman', sans-serif;


.class_selector {
    color: $variable-one;
    background-color: $variable-two;
    width: $variable-three;
    font: $font-stack;
}











//======================================= NESTING SELECTORS =======================================
/* 
    You can nest selectors inside other selectors in SASS, this improves readability.
*/
nav {
    ul{
        margin: 0;
        padding: 0;
        list-style-type: none;
    }
    &.myClass {                                    // & will be replaced by nav
        color: red;
    }
}










//======================================= MIXINS =======================================
/* 
    @Mixins are re-usable blocks of code in SASS that lets you re-use CSS properties
    You must use @include in a selector to call the function
*/

@mixin group-one($color: red) {              //optional argument                  
    background-color: $color;                             
    color: $color;                                           
    box-shadow: 0 0 1px $color;                   
    @content;                                // a selector can pass additional css properties                                      
}

@mixin group-two($color) {                  //required argument                               
    background-color: $color;
}

@mixin group-three {
    width: 500px;
    height: 500px;
    border: 1px solid red;
}


.myClass {
    @include group-one {        
        display: inline-block;              //this will replace the @content in the @mixin                      
    };
    @include group-two(green);                  
    @include group-three;
}












//======================================= EXTENTIONS =======================================
/* 
    You can use the @extend keyword to apply the css properties of one selector to another selector
*/

.class_one {
    background-color: blue;
    color: red;
    display: flex;
    justify-content: center;
    align-items: center;
}

.class_two {
    @extend .class_one;                 //this selector will now have all the properties from .class_one
    position: absolute;
    top: 30px;
    right: 45px;
}












//======================================= MATH MODULE =======================================
/* 
    The Math module is a built in module in SASS that has functions that
    perform basic math operations
*/

@use 'sass:math';                             // loading the math module

div {
    width: math.div(600, 900);                // dividing two numbers (must be unitless)
    width: math.round(0.344);                 // rounding an number to the nearest integer (can be any unit)
    width: math.ceil(23.43);                  // rounding a number up (can be any unit)
    width: math.floor(45.67px);               // rounding a number down (can be any unit)
    width: math.abs(-23px);                   // returns the absolute value of a number (can be any unit)
    width: math.min(23px, 45px, 62px, 34px);  // Returns the smallest number from a list of values. (must be the same units)
    width: math.max(87px, 76px, 9px, 7px);    // Returns the largest number from a list of values. (must be the same units)
    width: math.pow(2, 3);                    // Raises a number to a power (base^exponent). (must be unitless)
    width: math.sqrt(45);                     // Returns the square root of a number. (must be unitless)
    width: math.clamp(0px, 50px, 100px);      // Restricts a value within a defined range. (0 is min, 100 is max) (must be the same unit)
    height: (9px + 1px) * 45;                 // you can also use math operators here like in javascript
}












//======================================= CONDITIONAL STATEMENTS =======================================
/* 
    You can use @if, @else, @else-if, and @if-not to check a condition and return a set of css-properties
*/

$random: if(1 == 1, 30px, none);                           //if statements can be defined in one line to assign a value to a variable

@mixin theme($theme) {
    @if $theme == red {                                  
        background-color: red;                         
        color: orange;
    }
    @else if $theme == blue {
        background-color: blue;
        color: green;
    }
    @else if $theme == black{
        background-color: black;
        color: white;
    }
    @else {
        @error "Color you choose is not black, blue or red, #{theme}";    //@error is used to display an error on the terminal
    }

    @if not ($theme == purple) {                                    // this is the same as $theme !== purple
        border: purple;
    }
}


div{
    @include theme(blue);
    width: $random;
}   










//======================================= LOOP =======================================
/* 
    You can use the following loops to iterate a certain number of times.
    This can be usefull for creating multiple selectors.
*/


//------------------- @each
/* 
    You can use the @each keyword to loop through a list or map.
*/


$sizes: 10px, 20px, 30px;          

@each $size in $sizes {                            
    .icon-#{$size} {                // this will create 3 selectors
        font-size: $size;          
        height: $size;
        width: $size;
    }
}

$my-map: (
    "display": inline-block,
    "height": 50px,
    "width": 50px
);

@each $property, $value in $my-map {    // you can also iterate through the values of a map
    .random_class {                     
        #{$property}: $value;           // in this case, it will create 3 classes with different properties
    }
}




//------------------- @for
/* 
    You can use @for to loop through a set of numbers. It works similarly to a for loop in JS.
*/


@for $i from 1 through 3 {                                              // 3 will be included
    .loop-#{$i} {
        top: $i;
    }
}

@for $i from 1 to 3 {                                                    // 3 will be excluded
    .loop-#{$i} {
        bottom: $i;
    }
}





//------------------- @while
/* 
    You can use the @while loop in SASS to loop through a set of numbers. It works similarly to while loop in JS
*/

$number-one: 1;
$number-two: 10;

@while $number-one < $number-two {
    $number-one: $number-one + 1;
    .loop {
        color: red;
    }
}








//======================================= MAPS =======================================
/* 
    You can create maps with a SASS variable, maps are used to create a mapping between 
    a key and a css value
*/

$my-colors: (                                                        
    "primary-color": blue,                                                // "key": value
    "secondary-color": red,
    "third-color": green,
    "function_one": meta.get-function(function_one)                       // maps can also contain functions (scroll down for notes on functions)
);





//------------------- NESTED MAPS
/* 
    You can also have nested maps within other maps
*/

$my-colors: (    
    "primary-colors": blue,
    "secondary-color": green,
    "dark-colors": (                                //nested maps                           
        "fourth-color": grey,
    )
);




//------------------- MAP FUNCTIONS
/* 
     You can use the following functions to manipulate maps 
*/

$bool: map.has-key($map, "color");                                  // returns true or false if the map has the specified key
$keys: map.keys($map);                                              // returns a list of all the keys in the map
$values: map.values($map);                                          // returns a list of all the values in the map
$new-map: map.set($map, "color", blue);                             // setting a new value for a key in the map (replaces the old value if it already exists) and returns the updated map
$new_map: map.merge($map, $other-map);                              // merging two maps together (returns the updated map)
$new_map: map.remove($map, "left");                                 // removing a key from the map (returns the updated map)
$nested-map: map.deep-merge($map, $my-positions);                   // merging two maps together with all of its nested maps (returns the updated map)
$nested-map: map.deep-remove($my-colors, "dark-colors", "fourth-color");    // removing a property from a nested map

.myClass {
    background-color: map.get($my-colors, "primary-color");                 // getting a property from a map   
}












//======================================= LISTS =======================================
/* 
    Lists are a collection of css values that are assigned to a SASS variable.
    Lists are similar to arrays in JS, every value is assigned a numeric index.
*/

$color-list: red, green, blue;                    // creating a list



//------------------- LIST FUNCTIONS
/* 
    You can use the following functions to manipulate lists in SASS
*/

$my-list: list.append($color-list, yellow);             // we append a new css value to the end of the list and return a new list (does not mutate original list)             
$my-list: list.join($color-list, $my-other-list);       // we merge two lists into one, and we return the new list (does not mutate original list)
$my-list: list.index($color-list, 20px);                // searches for a value in a list and returns its index
$my-list: list.set-nth($color-list, -1, 50px);          // inserting a new css value at index n (does not mutate original list) (-1 means we insert it at the end of the list)
$color: list.nth($color-list, 2);                       // searches for the value in the list at index 2

.random_list {
    font: $my-list;
}










//======================================= INTERPOLATION =======================================
/* 
    You can use interpolation in SASS by using the following syntax. Interpolation allows
    you to dynamically create css-properties based on the value of a variable

    #{$variable}
*/


@mixin my-properties($name, $top-or-bottom) {             
    .new_class_#{$name} {                                                   
        background-image: url("images/#{$name}.jpg");                       //syntax starts with #{variable-name}
        #{$top-or-bottom}: 50px;    
    }
}


.myClass{
      @include my-properties("earth_image", top);                           //creating a class with @include  
}















//==================================================== FUNCTIONS ==================================================================================

@function my_function($number-one, $number-two, $custom: 30){       //functions can also have default values in the arguements
    @return $number-one * $number-two;                              //which can be overwritten when called
}

@function my_other_function ($numbers...){
    $sum: 0;

    @each $digit in $numbers {
        $sum: $sum + $digit; 
    }

    @return $sum;
}

.myFunction {
    position: absolute;
    top: my_function(2, 3) * 1px;
    left: my_other_function(1, 2, 3, 4, 5, 6) * 1px;
}






//======================================================= COLOR MODULE =================================================================================

.button {
    $primary-color: green;
    color: color.adjust($primary-color, $red: 140);                     //there are more arguments to this, look up the documentation
    background-color: adjust-hue($primary-color, 100deg);
    border-color: color.scale($primary-color, $lightness: -30%);         //darkening a color
    border-color: color.scale($primary-color, $blackness: -30%);         //lightening a color
    border-color: color.scale($primary-color, $saturation: -30%);        //desaturating a color
}




//========================================================== META MODULE ==========================================================================================


.meta_class {
    @include meta.load-css("partial.scss");                 //loads all the selectors from the file specified
}
