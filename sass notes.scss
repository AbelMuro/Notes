//====================================USING variables from other files=============================================================
//@use loads mixins, functions and variables from other .scss files, these files are called modules
//the only way to use the variables and mixins from these files is by using a namespace to access them


@use 'sass:map';                  //loading the map module
@use 'sass:math';                 //loading the math module
@use 'sass:color';                //loading the color module
@use 'sass:list';                 //loading the list module
@use 'sass:meta';                  //loading the meta module
@use '_partial.scss' with (       //these variables are being redefined in this file
    $custom-color: pink,        //the variables were defined as !default, which means their value can be changed here
    $custom-font: "courier",     
    $custom-font-size: 100px,
);   
@use '_partial.scss' as c;        //c is now a 'NAMESPACE' that can be used to access all the SASS variables as if it were an object

.example_one {
    color: partial.$custom-color;       //you can also use the name of the file as a namespace    
    background-color: c.$custom-color;  //$custom-color is a variable from _partial.scss
    @include c.random;
}













//=======================================SASS VARIABLES============================================================================
//all SASS variables must start with $

$variable-one: red;                                             //you can create variables in sass and assign them values like in javascript
$variable-two: blue;
$variable-three: 150px;
$font-stack: 'Times New Roman', sans-serif;


.class_selector {
    color: $variable-one;
    background-color: $variable-two;
    width: $variable-three;
    font: $font-stack;
}










//=====================================NESTING SELECTORS============================================================================

nav {
    ul{
        margin: 0;
        padding: 0;
        list-style-type: none;
    }
}


//this will create two selectors, div and div.some_class
div{
    background-color:blue;                           //this will select all DIVS and assign the property background-color: blue                    
    &.some_class {                                   //the & operator represents the parent selector
        color: red;                                  //this will select div.some_class and assign the property color: red
    }                                                //but NOT background-color: blue 
}









//======================================@MIXINS and @INCLUDE=============================================================================================
//MIXINS are similar to JS functions, below is the different ways to define a @mixin

@mixin group-one($color: red) {                             //instead of writing out the same lines of code in css, u can use @mixin to group
    background-color: $color;                                 //together a bunch of css properties and @include them in a selector
    color: $color;                                            //@mixing also works like a function, where you can pass any value
    box-shadow: 0 0 1px rgba($color, .30);                    //in this case, you dont HAVE to pass a value in this mixin
    @content;                                                 //you can pass more properties to this mixin with the @content
}

@mixin group-two($color) {                                   //in this case, you HAVE to pass a value in this mixin                                
    background-color: $color;
}

@mixin group-three {
    width: 500px;
    height: 500px;
    border: 1px solid red;
}

//after you define your @mixin, you must use @include to include the mixin into your css selector 

#someElement {
    @include group-one {
        display: inline-block;                              //you can pass properties to a mixin only if the mixin has @content
    };
}

p {
    @include group-two(green);                  
    @include group-three;
}











//===================================== @EXTEND =============================================================================================
// @extend can be used to give the properties of one class to another

%example-one {                              //this is a placeholder class, it will only print in the css file if 
    border: 1px solid blue;               // it's @extended in a selector
    padding: 100px;
    position: absolute;
}

body {
    @extend %example-one;                   //this selector will now have the same properties as %example_one
}


// you can also use extend to have one class get all the properties from another class, but still retain unique properties
.class_one {
    background-color: blue;
    color: red;
    display: flex;
    justify-content: center;
    align-items: center;
}

.class_two {
    @extend .class_one;                 //this selector will now have all the properties from .class_one
    position: absolute;
    top: 30px;
    right: 45px;
}











//=========================================OPERATORS===================================================================================================
//build in math functions for sass

div {
    width: math.div(600px, 900px) - 100px;   //using built in math functions in sass
    height: (9px + 1px) * 45;               //you can also use math operators here like in javascript
}











//===========================================@if, @else-if, @if not ()=========================================================================================

$random: if(1 == 1, 30px, none);                           //if statements can be defined in one line to assign a value to a variable

@mixin theme($theme) {
    @if $theme == red {                                  //this IF statement is similar to the IF statement in javascript
        background-color: red;                          //this can be useful for changing an entire group of variables based on a condition
        color: orange;
    }
    @else if $theme == blue {
        background-color: blue;
        color: green;
    }
    @else if $theme == black{
        background-color: black;
        color: white;
    }
    @else {
        @error "Color you choose is not black, blue or red, #{theme}";    //@error is used to display an error on the terminal
    }

    @if not ($theme == purple) {                                    //statement must return false for the expression below to be printed in the css file
        border: purple;
    }
}


div.selection {
    @include theme(blue);
    width: $random;
}   









//------------------------------------------------------@EACH------------------------------------------------------------------------------

$sizes: 10px, 20px, 30px;           //list

@each $size in $sizes {             //@each is used to loop through the values of a variable                  
    .icon-#{$size} {                //this will create 3 selectors in the css file with each of 
        font-size: $size;           // the values defined in the variable array
        height: $size;
        width: $size;
    }
}

$my-map: (
    "display": inline-block,
    "height": 50px,
    "width": 50px
);

@each $property, $value in $my-map {    //you can also iterate through the values of a map
    .random_class {                     
        #{$property}: $value;           //in this case, it will create 3 classes with different properties, not a good example
    }
}












//============================================= MAPS ==================================================================================================================================

$my-colors: (                                                               //this is a map
    "primary-color": blue,                                                //"key": value
    "secondary-color": red,
    "third-color": green
);
$my-positions: (
    "top": 30px,
    "left": 54px,
    "right": 60px
);

$new_map: map.merge($my-colors ,$my-positions);                             // merging two maps together
$new_map: map.remove($new_map, "left");                                     //removing a key from the map
.some_class_with_maps {
    background-color: map.get($new_map, "top");                             // using a built in function to access properties from a map           
}




//--------------------------------------------------------these are nested maps----------------------------------------------------------------------------------------------------
$roman-font: (                                                               
    "Times New Roman": (                                                    //a key has other keys that have their own value
        "Font-size": 50px,
        "color": black
    )
);
$courier-font: (
    "Courier": (
        "Font-size": 60px,
        "color": blue
    )
);
$nested-map: map.deep-merge($roman-font, $courier-font);                    //using deep-merge instead of merge
$nested-map: map.deep-remove($nested-map, "Times New Roman", "color");
.some_class_with_nested_maps {
    font: map.get($courier-font, "Courier", "Font-size");                   //using get to get a nested key
}












//-------------------------------------------------MAP FUNCTIONS----------------------------------------------------------------------------------------------------------------
// The map functions being used here are map.has-key(), map.keys(), map.values()


$another-map: (
    "background-color": red,
    "font-size": 30px
);


$bool: map.has-key($another-map,"color");                                  //returns true or false if the map has the specified key
@error map.keys($my-colors);                                               //u can use @error to display all the keys in a map on the terminal
@error map.values($my-colors);                                             //returns all the values from a map
$new-map: map.set($another-map, "color", blue);                            //setting new values to a map, you can also change an existing value
$map-value: map.get($another-map, "font-size");                            //getting a value from the map with a key



//-------------------------------------------------maps containing functions-----------------------------------------------------------------------------------------------

//scroll down below for more info on @functions on sass
@function function_one() {
    @return 10px;
}

//syntax for calling a SASS function
$function-maps: (
    "function_one": meta.get-function(function_one)                     //you can use predefine module functions as map values
);
.function_maps {
    width: meta.call(map.get($function-maps, "function_one"));
}












//============================================ LISTS ================================================================================================
//similar to maps, but lists dont have keys, they only have values

$empty-list: ();                                   //creating an empty list
$random-list: red, green, blue;             //creating a list


$my-list: list.append(10px 20px, 30px);             //list.append(list, valueToBeAddedAtEnd, separator)
$my-other-list: list.append(1px solid, black);
$joined-list: list.join($my-list, $my-other-list);  //joining two lists

$index: list.index($my-list, 20px);  //returns 2    //searches through a list and returns the index of the value specified in the second parameter
$indexed-value: list.nth($my-list, 2);                //this will return 20px because that value is indexed by 2
$another_list: list.set-nth($my-list, -1, 50px);    //positioning a value in a list based on the second argument, -1 means that it will be placed at the end of the list

.random_list {
    font: $joined-list;
}










//============================================= INTERPOLATION ========================================================================================

@mixin my-properties($name, $top-or-bottom, $left-or-right) {               //this is interpolation, using a sass variable to define a class name, property
    .new_class_#{$name} {                                                   // or a string
        background-image: url("images/#{$name}.jpg");                       //syntax starts with #{variable-name}
        #{$top-or-bottom}: 50px;    
        #{$left-or-right}: 40px
    }
}

@include my-properties("earth_image", top, left);                           //creating a class with @include










//=============================================== LOOPS ===========================================================================================

$base-color: blue;

//REMEMBER, if 'through' is used, then the final number is included, if 'to' is used then the final number is excluded
@for $i from 1 through 3 {                                              //FOR loops that can iterate through a set of values
    .loop-#{$i} {
        background-color: lighten($base-color, $i * 5%);
    }
}

$number-one: 1;
$number-two: 10;
@while $number-one < $number-two {
    $number-one: $number-one + 1;
}







//==================================================== FUNCTIONS ==================================================================================

@function my_function($number-one, $number-two, $custom: 30){       //functions can also have default values in the arguements
    @return $number-one * $number-two;                              //which can be overwritten when called
}

@function my_other_function ($numbers...){
    $sum: 0;

    @each $digit in $numbers {
        $sum: $sum + $digit; 
    }

    @return $sum;
}

.myFunction {
    position: absolute;
    top: my_function(2, 3) * 1px;
    left: my_other_function(1, 2, 3, 4, 5, 6) * 1px;
}






//======================================================= COLOR MODULE =================================================================================

.button {
    $primary-color: green;
    color: color.adjust($primary-color, $red: 140);                     //there are more arguments to this, look up the documentation
    background-color: adjust-hue($primary-color, 100deg);
    border-color: color.scale($primary-color, $lightness: -30%);         //darkening a color
    border-color: color.scale($primary-color, $blackness: -30%);         //lightening a color
    border-color: color.scale($primary-color, $saturation: -30%);        //desaturating a color
}




//========================================================== META MODULE ==========================================================================================


.meta_class {
    @include meta.load-css("partial.scss");                 //loads all the selectors from the file specified
}
